[manifest]
version = "1.0.0"
dump_lua = true
priority = 2147483647

[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''function end_round\(\)(?<pre>[\s\S]+?)func = function\(\)'''
position = 'at'
payload = "function end_round()$pre func = G.LOBBY.code and G.MULTIPLAYER.end_round or function()"
match_indent = false
times = 1

[[patches]]
[patches.regex]
target = "game.lua"
pattern = '''function Game:update_round_eval\(dt\)(?<pre>[\s\S]+?)if not G.STATE_COMPLETE then'''
position = 'at'
payload = '''function Game:update_round_eval(dt)$pre if not G.STATE_COMPLETE and not G.MULTIPLAYER_GAME.prevent_eval then
        G.MULTIPLAYER_GAME.prevent_eval = true'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local t =   create_UIBox_generic_options({no_back = from_game_over, no_esc = from_game_over, contents ={'''
position = 'at'
payload = '''local t = G.LOBBY.code and create_UIBox_generic_options({contents ={
    {n=G.UIT.R, config={padding = 0.0, align = "cm", colour = G.C.CLEAR}, nodes={
      {n=G.UIT.R, config={align = 'cm', padding = 0.1, no_fill = true, minh = 0, minw = 0}, nodes={
        {n=G.UIT.O, config={id = 'tab_contents', object = UIBox{definition = G.UIDEF.run_setup_option('New Run'), config = {offset = {x=0,y=0}}}}}
      }},
    }},
  }}) or create_UIBox_generic_options({no_back = from_game_over, no_esc = from_game_over, contents ={'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if type == 'New Run' then'''
position = 'at'
payload = '''if type == 'New Run' and not G.LOBBY.code then'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''G.FUNCS.change_stake({to_key = G.viewed_stake})
  else'''
position = 'after'
payload = '''if G.LOBBY.code then
    G.viewed_stake = G.LOBBY.deck.stake
    G.FUNCS.change_stake({to_key = G.viewed_stake})
  end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''if G.SETTINGS.current_setup == 'New Run' then'''
position = 'at'
payload = '''if G.SETTINGS.current_setup == 'New Run' or G.SETTINGS.current_setup == 'Multiplayer' then'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''G.GAME.viewed_back = Back(get_deck_from_name(G.PROFILES[G.SETTINGS.profile].MEMORY.deck))'''
position = 'at'
payload = '''G.GAME.viewed_back = G.LOBBY.code and Back(get_deck_from_name(G.LOBBY.deck.back)) or Back(get_deck_from_name(G.PROFILES[G.SETTINGS.profile].MEMORY.deck))'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{
        label = localize('b_full_deck'),
        chosen = true,
        tab_definition_function = G.UIDEF.view_deck
      },'''
position = 'after'
payload = '''G.LOBBY.code and {
              label = G.localization.misc.challenge_names.c_multiplayer_1 or "Multiplayer",
              tab_definition_function = G.UIDEF.multiplayer_deck,
            },'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''not is_row and {n=G.UIT.R, config={align = "cm", minh = 0.9}, nodes={'''
position = 'at'
payload = '''(not G.LOBBY.code) and (not is_row) and {n=G.UIT.R, config={align = "cm", minh = 0.9}, nodes={'''
match_indent = true
times = 1

# Have to use regex because it doesnt match otherwise for some reason
[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = '''function G.UIDEF.run_setup_option(?<pre>[\s\S]+?)localize\('b_play_cap'\)'''
position = 'at'
payload = '''function G.UIDEF.run_setup_option$pre G.LOBBY.code and localize('b_select') or localize('b_play_cap')'''
match_indent = true
times = 1

[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''\) then self.cost = 0 end'''
position = 'after'
payload = '''
  if self.edition and self.edition.type == 'mp_phantom' then self.sell_cost = 0 end
  if self.ability.name == 'j_mp_lets_go_gambling' then self.sell_cost = -1 end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if G.jokers.cards[i] ~= self then'''
position = 'at'
payload = '''if G.jokers.cards[i] ~= self and (not G.jokers.cards[i].edition or G.jokers.cards[i].edition.type ~= "mp_phantom") then'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''local chosen_joker = pseudorandom_element(G.jokers.cards, pseudoseed('ankh_choice'))'''
position = 'at'
payload = '''local copyable_jokers = {}
    for i, v in ipairs(G.jokers.cards) do
      if not G.jokers.cards[i].edition or G.jokers.cards[i].edition.type ~= "mp_phantom" then copyable_jokers[#copyable_jokers + 1] = v end
    end
    local chosen_joker = pseudorandom_element(copyable_jokers, pseudoseed('ankh_choice'))'''
match_indent = true
times = 1

[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''--if there is at least one joker(?<pre>[\s\S]+?)for k, v in pairs\(G.jokers.cards\) do'''
position = 'at'
payload = '''--if there is at least one joker$pre local copyable_jokers = {}
      for i, v in ipairs(G.jokers.cards) do
        if not G.jokers.cards[i].edition or G.jokers.cards[i].edition.type ~= "mp_phantom" then copyable_jokers[#copyable_jokers + 1] = v end
      end
      for k, v in pairs(copyable_jokers) do'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''dollars = dollars + G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)
    end'''
position = 'after'
payload = '''
  if not G.MULTIPLAYER_GAME.comeback_bonus_given then
		G.MULTIPLAYER_GAME.comeback_bonus_given = true
		add_round_eval_row({
			bonus = true,
			name = "comeback",
			pitch = pitch,
			dollars = 4 * G.MULTIPLAYER_GAME.comeback_bonus,
		})
		dollars = dollars + 4 * G.MULTIPLAYER_GAME.comeback_bonus
	end'''
match_indent = false
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif config.name == 'hands' then'''
position = 'before'
payload = '''elseif config.name == "comeback" then
  table.insert(left_text, {
    n = G.UIT.T,
    config = {
      text = G.MULTIPLAYER_GAME.comeback_bonus,
      scale = 0.8 * scale,
      colour = G.C.PURPLE,
      shadow = true,
      juice = true,
    },
  })
  table.insert(left_text, {
    n = G.UIT.O,
    config = {
      object = DynaText({
        string = {
          localize("total_lives_lost"),
        },
        colours = { G.C.UI.TEXT_LIGHT },
        shadow = true,
        pop_in = 0,
        scale = 0.4 * scale,
        silent = true,
      }),
    },
  })'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''main_menu = UIBox_button{ label = {localize('b_main_menu')}, button = "go_to_menu", minw = 5}'''
position = 'after'
payload = '''unstuck_button = UIBox_button{ label = {localize('b_unstuck')}, button = "mp_unstuck", minw = 5}
return_to_lobby = UIBox_button{ label = {localize('return_lobby')}, button = "mp_return_to_lobby", minw = 5}
leave_lobby = UIBox_button{ label = {localize('leave_lobby')}, button = "lobby_leave", minw = 5}'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''G.GAME.seeded and current_seed or nil,
      restart,
      main_menu,'''
position = 'at'
payload = '''(not G.LOBBY.code and G.GAME.seeded) and current_seed or nil,
not G.LOBBY.code and restart or nil,
not G.LOBBY.code and main_menu or nil,
G.LOBBY.code and unstuck_button or nil,
G.LOBBY.code and return_to_lobby or nil,
G.LOBBY.code and leave_lobby or nil,'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:can_sell_card(context)'''
position = 'after'
payload = '''if self.config.center.key == "j_mp_hanging_bad" and is_pvp_boss() then
  return false
end'''
match_indent = true
times = 1

[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.evaluate_round(?<pre>[\s\S]+?)to_big(G.GAME.chips) >= to_big(G.GAME.blind.chips)'''
position = 'at'
payload = '''G.FUNCS.evaluate_round$pre to_big(G.GAME.chips) >= to_big(G.GAME.blind.chips) or G.LOBBY.code'''
match_indent = true
times = 1

[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.evaluate_round(?<pre>[\s\S]+?)G.GAME.chips - G.GAME.blind.chips >= 0'''
position = 'at'
payload = '''G.FUNCS.evaluate_round$pre (G.GAME.chips - G.GAME.blind.chips >= 0) or G.LOBBY.code'''
match_indent = true
times = 1